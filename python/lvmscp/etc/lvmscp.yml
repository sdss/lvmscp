enabled_controllers: [sp3]

controllers:
  sp1:
    host: 10.7.45.26
    port: 4242
    detectors:
      r1:
        serial: STA29857
        taps: 4
        gain: [2.75, 2.79, 2.68, 2.74]
        readnoise: [3.2, 3.3, 3.0, 3.1]
        type: STA4850
      b1:
        serial: STA29925
        taps: 4
        gain: [2.71, 2.71, 2.68, 2.69]
        readnoise: [3.0, 3.0, 2.8, 2.8]
        type: STA4850
      z1:
        serial: STA27977
        taps: 4
        gain: [2.76, 2.65, 2.89, 2.78]
        readnoise: [3.6, 3.6, 3.4, 3.6]
        type: STA4850
  sp2:
    host: 10.7.45.25
    port: 4242
    detectors:
      r2:
        serial: STA29857
        taps: 4
        gain: [2.63, 2.64, 2.65, 2.71]
        readnoise: [3.2, 3.3, 3.0, 3.1]
        type: STA4850
      b2:
        serial: STA29925
        taps: 4
        gain: [2.45, 2.46, 2.46, 2.50]
        readnoise: [3.0, 3.0, 2.8, 2.8]
        type: STA4850
      z2:
        serial: STA27977
        taps: 4
        gain: [2.60, 2.65, 2.57, 2.72]
        readnoise: [3.6, 3.6, 3.4, 3.6]
        type: STA4850
  sp3:
    host: 10.7.45.36
    port: 4242
    detectors:
      r3:
        serial: STA29857
        taps: 4
        gain: [2.63, 2.64, 2.65, 2.71]
        readnoise: [3.2, 3.3, 3.0, 3.1]
        type: STA4850
      b3:
        serial: STA29925
        taps: 4
        gain: [2.45, 2.46, 2.46, 2.50]
        readnoise: [3.0, 3.0, 2.8, 2.8]
        type: STA4850
      z3:
        serial: STA27977
        taps: 4
        gain: [2.60, 2.65, 2.57, 2.72]
        readnoise: [3.6, 3.6, 3.4, 3.6]
        type: STA4850

timeouts:
  controller_connect: 5
  write_config_timeout: 2
  write_config_delay: 0.0001
  expose_timeout: 2
  readout_expected: 40
  readout_max: 60
  fetching_expected: 5
  fetching_max: 10
  flushing: 4.7

lamps:
  - Argon
  - Xenon
  - LDLS
  - Neon
  - HgNe
  - Quartz

# Header for each CCD. The key is the header keyword name. The value can
# be a single string, a tuple with the value and comment, or a dictionary for
# cases in which the value is retrieved from an archon command or when the
# value depends on the CCD name.
header:
  CCDTEMP1:
    command: status
    detectors:
      r1: ['mod2/tempa', 'Temperature of the sensor (HEATERX 2)', 2]
      b1: ['mod12/tempc', 'Temperature of the sensor (HEATERX 12)', 2]
      z1: ['mod12/tempa', 'Temperature of the sensor (HEATERX 12)', 2]
      r2: ['mod2/tempa', 'Temperature of the sensor (HEATERX 2)', 2]
      b2: ['mod12/tempc', 'Temperature of the sensor (HEATERX 12)', 2]
      z2: ['mod12/tempa', 'Temperature of the sensor (HEATERX 12)', 2]
      r3: ['mod2/tempa', 'Temperature of the sensor (HEATERX 2)', 2]
      b3: ['mod12/tempc', 'Temperature of the sensor (HEATERX 12)', 2]
      z3: ['mod12/tempa', 'Temperature of the sensor (HEATERX 12)', 2]
  CCDTEMP2:
    command: status
    detectors:
      r1: ['mod2/tempb', 'LN2 temperature (HEATERX 2)', 2]
      b1: ['mod2/tempc', 'LN2 temperature (HEATERX 2)', 2]
      z1: ['mod12/tempb', 'LN2 temperature (HEATERX 12)', 2]
      r2: ['mod2/tempb', 'Temperature of the sensor (HEATERX 2)', 2]
      b2: ['mod2/tempc', 'Temperature of the sensor (HEATERX 12)', 2]
      z2: ['mod12/tempb', 'Temperature of the sensor (HEATERX 12)', 2]
      r3: ['mod2/tempb', 'Temperature of the sensor (HEATERX 2)', 2]
      b3: ['mod2/tempc', 'Temperature of the sensor (HEATERX 12)', 2]
      z3: ['mod12/tempb', 'Temperature of the sensor (HEATERX 12)', 2]
  TRIMSEC1: ['[1:2043, 2041:4080]', 'Data section for quadrant 1']
  TRIMSEC2: ['[2078:4120, 2041:4080]', 'Data section for quadrant 2']
  TRIMSEC3: ['[1:2043, 1:2040]', 'Data section for quadrant 3']
  TRIMSEC4: ['[2078:4120, 1:2040]', 'Data section for quadrant 4']
  BIASSEC1: ['[2044:2060, 2041:4080]', 'Overscan section for quadrant 1']
  BIASSEC2: ['[2061:2077, 2041:4080]', 'Overscan section for quadrant 2']
  BIASSEC3: ['[2044:2060, 1:2040]', 'Overscan section for quadrant 3']
  BIASSEC4: ['[2061:2077, 1:2040]', 'Overscan section for quadrant 4']

# This is the ACF configuration file to be loaded to the Archon including the
# timing script. {archon_etc} gets completed with the path of the etc directory once
# installed. If the path is not absolute, the root of the package is used as working
# directory.
archon:
  acf_file: LVM_100kHz.acf
  acf_overrides:
    sp2:
      MOD12\HEATERATARGET: -112
      MOD12\HEATERBTARGET: -117
    sp3:
      MOD2\HEATERATARGET: -109.5
      MOD12\HEATERATARGET: -111.5
      MOD12\HEATERBTARGET: -110.5

# The base directory where the data will be saved (and MJD subdirectory is always added)
# and the format of the saved filename. Available placeholders are {observatory} which
# is replaced with "apo" or "lco", {hemisphere} replaced with "n" if the observatory is
# "apo" and "s" if "lco", {controller} which is replaced with the name of the Archon
# controller defined above, {ccd} which is the name do the CCD (including the controller
# identifier), and {exposure} which is a never-repeating sequence identifier. "split"
# controls whether the CCD frames from each controller are saved as individual files
# or as different HDU extensions inside the FITS file.
files:
  data_dir: '/data/spectro/lvm'
  split: true
  template: 'sdR-{hemisphere}-{ccd}-{exposure_no:08d}.fits.gz'

checksum:
  write: true
  mode: md5

status_delay: 30.0

# Actor configuration for the AMQPActor class
actor:
  name: lvmscp
  host: localhost
  port: 5672
  log_dir: '/data/logs/lvmscp'
  schema: etc/schema.json
